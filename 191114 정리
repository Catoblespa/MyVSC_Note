타이머를 추가하자


System  ->  Timer ->Manager 필터 추가하자
            Timer -> CTimer 클래스 추가.

CTimer_Manager 클래스를 생성


BEGIN(Engine)
class ENGINE_DLL CTimer{

    private:
    explicit    CTimer()
    virtual  ~CTimer() = default


    publie:
    HRESULT Ready_Timer();



    private:
    LARGE_INTEGER m_FrameTime;
    LARGE_INTEGER m_FixTime;
    LARGE_INTEGER m_LastTime;
    LARGE_INTEGER m_CpuTick;

    public:
    static CTimer * Create();
    virtual void Free();
}

ENd



HRESULT CTimer::Ready_Timer();
{
    QuertPerformanceCounter(m_FrameTime);
    QuertPerformanceCounter(m_FixTime);
    QuertPerformanceCounter(m_LastTime);
    QuertPerformanceCounter(m_CpuTick);



    return NOERROR;
}



//1초에 한번씩 m_CpuTick을 계산.
_double CTimer::Compute_TimerDelta();
{
    QuertPerformanceCounter(m_FrameTime);

    if(m_FrameTime.QuadPart - m_FixTime.QuadPart >=m_CpuTick.QuadPart)
    {
        QuertPerformanceCounter(m_CpuTick);
        m_FixTime = m_FixTime;
    }


    _double TimerDelta =  _double(m_FrameTime.QuadPart - m_LastTime.QuadPart /m_CpuTick.QuadPart); //1초를 기준으로 몇초 지났냐 ?

    QuertPerformanceCounter(&m_LastTime);
    return TimerDelta;
}




#include "Base.h"


BEGIN(Englen)
class Timer_Manager :public CBase
{
    디클레어 싱글톤
public: 
    생성소멸
    public:
    HRESULT Add_Timer(const _tchar * pTimerTag);
    _double Compude_TimeDelta(const _tchar * pTimerTag);

   private:
    unordered_map<const _tchar * , CTimer>  m_Timer;
    typdef   unordered_map<const _tchar * , CTimer> TIMERS;

private:
CTImer * Find_Timer(const _thcar * TimerTag);
    public:

    void Free();
}

END
    HRESULT Add_Timer(const _tchar * pTimerTag)
    {
        if(CTimer * pTimer = Find_Timer(pTimerTag) == nullptr);
          return E_FAIL;


          CTimer *pTimer = CTimer::Create()

          if(pTimer == nullptr )   
          return E_FAIL;


          m_Timers.insert(TIMERS::Value_type(tag,timer));
    }
        
    CTImer * Find_Timer(const _thcar * TimerTag)
    {
        auto iter =find_if ...


        if(iter == m_Timer.end())
            return nullptr;

        return iter->second;
    }


    
    HRESULT Add_Timer(const _tchar * pTimerTag)
    {
            ...
    }
    
    
    void Free()
    {
        for
        Safe_Release()m_Timer;
    }


    이제 매니지 먼트에 CTimer_Manager를 맴버 변수 추가..  해더도 추가해주고.
    //레디 엔진 ,릴리즈엔진에서,  프리에서 CTimer_Manager 할당및 릴리즈 모두해주자.

    CTimer_Manager의 함수 인터페이스를 매니지먼트에서 구현.


    client.cpp로가서 타이머 하나는 프레임락 , 타이머 하나는 Update넣자

    ///////////////////////////////////////////////////////////////////////////////////////지형의 높낮이


    Loading에서 Component_Texture_Terrain  


    Shaer_Tarring 로딩 .. 


    다렉에서 UV 좌표가 1을 넘어가면 자동으로 0으로 인식한다.



    현재 Terrain의 버텍스 갯수를 임의의 숫자로 잡아놨는데 이제 , Height맵의 픽셀갯수만큼 그대로 생성하도록하자.


    Create를 오버로딩해서 const _tchar * pHeightMapFath를 받도록 만들자.
    레디 컴포넌트 프로토타입 도 경로를 받게 만들자.

    이제 레디컴포넌트 프로토타입(경로)에서 bitmap을 읽어서 크기를 불러오자.

{
    
    _ulong dwByte = 0;    //이게 =0
    HANDLE nFile Create(pHeightMapFath,GERERIC_READ,0,nullptr , OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL,0);


    BITMAPFILEHEADER fh;
    BITMAPINFOHEADER ih;
    ReadFile(nFile,&fh,sizeof(BITMAPFILEHEADER), &dwByte);//dwByte가 0을 반환하면 읽기 실패임.
    ReadFile(nFile,&ih,sizeof(BITMAPINFOHEADER), &dwByte);

    ih.biWidth = 너비       //밑의 iNum..X 다 바꿔주기.
    ih.biHeight = 높이 

    //우리가 쓸 높이맵은 회색이미지인데, 회색이미지의 RGBA가 모두 같은 값을 갖고있다는 뜻이. 우리는 여기서 R만가져오든 하나씩만 가져와 0~255값을 사용하여 만들거다.
        A           R           G           B
    01010101    01010101    01010101    01010101
    00000000    00000000    11111111    00000000 &
    ---------------------------------------------
    00000000    00000000    01010101    00000000   >> 8
    00000000    00000000    00000000    01010101   
    이짓하기 싫으면
    B값을 바로 가져오자. 쉬프트 연산하기 싫자나



    _ulong * pPixel = new _ulong[ih.biWidth * ih.biHeight];


    ReadFile(hFile ,sizeof(_ulong) * ih.biWidth * ih.biHeight ,&dwByte);


    ...
    pVertices[iIndex].vPosition = .... pPixel[iIndex] & 0x000000FF
    ...


    delete[] pPixel;

    CloseHandle();
}

이제 프로토타입을 넣을때 새로 만들자.




////////////////다렉 이미지의 정보에 접근하여 변경하자!(픽셀정보에 접근하여 변경하자!)


LPDIRECT3DTEXTURE9 pTexture;
                //디바이스,U,V,MIPLEVEL,용도,픽셀정보
D3DXCreateTexture(Device,129,129 ,1,0,D3DFMT_A8R8G8B8,D3DPOOL_MANAGED,&pTexture);


D3DLOCKED_RECT LockRect; //공간을 잠그고.. 잠긴 것의 정보를 저장하기위한 정보
            //Pitch :   내 이미지의 가로 한줄의 바이트수
            //pBits :   픽셀정보가 시작되는 메모리영역.



        //몇번째이미지?(MIPLEVEL),락대상 정보자장어디다?
pTexture->LockRect(0,           &LockRect,               ,nullptr , 0);

    //void * 를 4byte포인터로 캐스팅하고 접근해야 에러 안뜨겠지 ? 픽셀하나는 4byte니까..

    ////((_ulong*)(LockRect.pBits))[0] = D3DXCOLOR(1.f, 0.f,0.f,1.f);



    for (size_t i = 0; i <129; ++i)
        for (size_t j = 0; j <129; ++j)
        {
            size_t index = i * 129 +j;
            ((_ulong*)(LockRect.pBits))[index] = D3DXCOLOR(1.f, 0.f,0.f,1.f);

        }



pTexture->UnLock();

                        //저장위치            이미지형식(ImageFileFormat)
D3DXSaveTextureToFile(L"../Bin/Temp.bmp" , D3DXIFF_BMP,pTexture,nullptr);



